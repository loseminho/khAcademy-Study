--테이블 생성방법
-- CREATE TABLE 테이블이름(컬럼이름 자료형(크기))

CREATE TABLE MEMBER(
    MEMBER_ID   VARCHAR2(20),
    MEMBER_PW   VARCHAR2(20),
    MEMBER_NAME VARCHAR2(21)
);
SELECT * FROM MEMBER;

--테이블 컬럼 값에 대한 설명 코멘트 작성 명령어
COMMENT ON COLUMN MEMBER.MEMBER_ID IS '회원아이디';
COMMENT ON COLUMN MEMBER.MEMBER_PW IS '회원비밀번호';
COMMENT ON COLUMN MEMBER.MEMBER_NAME IS '회원이름';

--임의의 데이터 삽입
INSERT INTO MEMBER VALUES('user01','1234','유저1');

--제약조건이 하나도 없는 테이블 생성
CREATE TABLE USER_NOCONS(
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(20),
    USER_PW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(6),
    PHONE       CHAR(11)
);

INSERT INTO USER_NOCONS VALUES(1,'user01','1234','유저1','여자','01011111111');
SELECT * FROM USER_NOCONS;


--제약조건 NOT NULL 설정.
CREATE TABLE USER_NOTNULL(
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(30) NOT NULL,
    USER_PW     VARCHAR2(30) NOT NULL,
    USER_NAME   VARCHAR2(30) NOT NULL,
    GENDER      CHAR(6),
    PHONE       CHAR(11)
);

INSERT INTO USER_NOTNULL
VALUES(1, 'user01','1234','유저1','남자','01011111111');

--NULL을 설정해놓은 컬럼 값에 NULL을 삽입 시, 에러 발생
INSERT INTO USER_NOTNULL
VALUES(2, 'user02',NULL,'유저1','남자','01011111111');

--UNIQUE : 해당 컬럼 값의 중복을 제한
--제약조건 UNIQUE 설정.
CREATE TABLE USER_UNIQUE(
    USER_NO     NUMBER UNIQUE NOT NULL,  --UNIQUE 컬럼 레벨 설정
    USER_ID     VARCHAR2(20),
    USER_PW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(6),
    PHONE       CHAR(11),
    UNIQUE(USER_ID)            --UNIQUE 테이블 레벨 설정
);

SELECT * FROM USER_UNIQUE;
INSERT INTO USER_UNIQUE
VALUES(1,'user01','1111','유저1','남자','01011111111');

--UNIQUE을 설정해놓은 컬럼 값에 중복 값을 삽입 시, 에러 발생
INSERT INTO USER_UNIQUE
VALUES(1,'user01','1111','유저2','여자','01022222222');

--UNIQUE여도 NULL은 데이터가 아니기때문에 많이 들어갈 수 있음.
INSERT INTO USER_UNIQUE
VALUES(3,NULL,'1111','유저3','여자','01033333333');

--UNIQUE 다른 선언 방법
CREATE TABLE USER_UNIQUE2(
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(20),
    USER_PW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(6),
    PHONE       CHAR(11),
    UNIQUE(USER_NO, USER_ID)        --동시에 중복값이 들어올때만 UNIQUE에 걸림
);
SELECT * FROM USER_UNIQUE2;
INSERT INTO USER_UNIQUE2
VALUES(1,'user01','1234','유저1','남자','01011111111');
INSERT INTO USER_UNIQUE2
VALUES(1,'user02','1234','유저2','남자','01022222222');

--PRIMARY KEY 설정
CREATE TABLE USER_PK1(
    USER_NO     NUMBER PRIMARY KEY, -- 컬럼 레벨에서 PK 설정
    USER_ID     VARCHAR2(20),
    USER_PW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(6),
    PHONE       CHAR(11)
);
INSERT INTO USER_PK1
VALUES(1,'user01','1234','유저1','남자','01011111111');

CREATE TABLE USER_PK2(
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(20),
    USER_PW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(6),
    PHONE       CHAR(11),
    PRIMARY KEY(USER_NO)        --테이블 레벨에서 PK 설정
);

--두개를 PK로 설정 가능.
CREATE TABLE USER_PK3(
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(20),
    USER_PW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(6),
    PHONE       CHAR(11),
    PRIMARY KEY(USER_NO,USER_ID)        --테이블 레벨에서 PK 설정
);

-------------------------------------------------------------


CREATE TABLE SHOP_MEMBER(
    USER_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) UNIQUE NOT NULL,
    USER_PW VARCHAR2(20) NOT NULL,
    USER_NAME VARCHAR2(20)
);
INSERT INTO SHOP_MEMBER
VALUES(1,'user01','1111','유저1');
INSERT INTO SHOP_MEMBER
VALUES(2,'user02','2222','유저2');
INSERT INTO SHOP_MEMBER
VALUES(3,'user03','3333','유저3');
                       
SELECT * FROM SHOP_MEMBER;

CREATE TABLE SHOP_BUY1(
    BUY_NO          NUMBER PRIMARY KEY,
    --외래키 컬럼 레벨에서 설정
    USER_ID         VARCHAR2(20) REFERENCES SHOP_MEMBER(USER_ID),
    PRODUCT_NAME    VARCHAR2(300),
    BUY_DATE        DATE
);
SELECT * FROM SHOP_BUY1;
INSERT INTO SHOP_BUY1 VALUES(1,'user01','맥북프로',SYSDATE-1);
INSERT INTO SHOP_BUY1 VALUES(2,'user02','키보드',SYSDATE);
INSERT INTO SHOP_BUY1 VALUES(3,'user03','키보드',SYSDATE);

--부모 테이블에 없는 값으로 변경 불가능한 에러 상황들
INSERT INTO SHOP_BUY1 VALUES(2,'user04','키보드',SYSDATE);
UPDATE SHOP_BUY1 SET USER_ID='user04' WHERE BUY_NO=2;


CREATE TABLE SHOP_BUY(
    BUY_NO          NUMBER PRIMARY KEY,
    USER_ID         VARCHAR2(20),
    PRODUCT_NAME    VARCHAR2(300),
    BUY_DATE        DATE,
    --외래킬 테이블 레벨에서 설정
    FOREIGN KEY(USER_ID) REFERENCES SHOP_MEMBER(USER_ID)
);

CREATE TABLE SHOP_BUY3(
    BUY_NO          NUMBER PRIMARY KEY,
    --PK인 경우에만 가능한 참조 상황.
    USER_NO         NUMBER(20) REFERENCES SHOP_MEMBER,
    USER_ID         VARCHAR2(20),
    PRODUCT_NAME    VARCHAR2(300),
    BUY_DATE        DATE
);


--다른 테이블에서 참고 하고 있는 어미 테이블의 데이터 값은  삭제 불가.
SELECT * FROM SHOP_MEMBER;
SELECT * FROM SHOP_BUY1;
DELETE FROM SHOP_BUY1 WHERE BUY_NO=3;
DELETE FROM SHOP_MEMBER WHERE USER_NO=3;
SELECT * FROM SHOP_MEMBER;



CREATE TABLE SHOP_MEMBER1(
    USER_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) UNIQUE NOT NULL,
    USER_PW VARCHAR2(20) NOT NULL,
    USER_NAME VARCHAR2(20)
);
INSERT INTO SHOP_MEMBER1
VALUES (1,'user11','1111','유저1');
INSERT INTO SHOP_MEMBER1
VALUES (2,'user22','2222','유저2');
CREATE TABLE SHOP_MEMBER2(
    USER_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) UNIQUE NOT NULL,
    USER_PW VARCHAR2(20) NOT NULL,
    USER_NAME VARCHAR2(20)
);
INSERT INTO SHOP_MEMBER2
VALUES (1,'user33','1111','유저3');
INSERT INTO SHOP_MEMBER2
VALUES (2,'user44','2222','유저4');

SELECT * FROM SHOP_MEMBER1
UNION ALL
SELECT * FROM SHOP_MEMBER2;

--ON DELETE SET NULL
CREATE TABLE SHOP_BUY_TEST1(
    BUY_NO NUMBER PRIMARY KEY,
    --샵멤버1 유저ID를 참조한다, 그 데이터가 삭제시 NULL로 변경한다.
    USER_ID VARCHAR2(20) REFERENCES SHOP_MEMBER1(USER_ID) ON DELETE SET NULL,
    PRODUCT_NAME VARCHAR(200),
    BUY_DATE DATE
);

INSERT INTO SHOP_BUY_TEST1
VALUES(1, 'user11','핸드폰',SYSDATE);
INSERT INTO SHOP_BUY_TEST1
VALUES(2, 'user22','노트북',SYSDATE);
SELECT * FROM SHOP_BUY_TEST1;
SELECT * FROM SHOP_MEMBER1;
DELETE FROM SHOP_MEMBER1 WHERE USER_ID='user11';

--ON DELETE CASCADE
CREATE TABLE SHOP_BUY_TEST2(
    BUY_NO NUMBER PRIMARY KEY,
    -- 샵멤버2 유저ID를 참조한다, 그 데이터가 삭제시 해당 값을 참조한
    -- 현재 테이블의 로우도 전부 삭제한다.
    USER_ID VARCHAR2(20) REFERENCES SHOP_MEMBER2(USER_ID) ON DELETE CASCADE,
    PRODUCT_NAME VARCHAR(200),
    BUY_DATE DATE
);

SELECT * FROM SHOP_MEMBER2;
INSERT INTO SHOP_BUY_TEST2
VALUES(1,'user33','커피',SYSDATE);
INSERT INTO SHOP_BUY_TEST2
VALUES(2,'user44','마우스',SYSDATE);
INSERT INTO SHOP_BUY_TEST2
VALUES(3,'user44','키보드',SYSDATE);

SELECT * FROM SHOP_MEMBER2;
SELECT* FROM SHOP_BUY_TEST2;
DELETE FROM SHOP_MEMBER2 WHERE USER_ID='user44';

--CHECK : 해당 컬럼에 설정한 값만 넣을 수 있게 하는 제약 조건
CREATE TABLE USER_CHECK(
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(20),
    USER_PW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(6) CHECK(GENDER IN ('남자','여자')),
    PHONE       CHAR(11)
);
INSERT INTO USER_CHECK
VALUES (1,'user01','1234','유저1','남자','01011111111');
INSERT INTO USER_CHECK
VALUES (2,'user02','1234','유저2','여자','01022222222');
SELECT * FROM USER_CHECK;
--CHECK 제약조건에 맞지 않는 값은 오류, NULL값은 삽입 가능
INSERT INTO USER_CHECK
VALUES (3,'user03','1234','유저3','여성','01033333333');






















