-------------------------복습 및 추가 스터디
SELECT * FROM EMPLOYEE;
SELECT * FROM JOB;
SELECT * FROM DEPARTMENT;

--전직원의 이름, 부서명, 직급명, 급여 출력
--1)JOIN
SELECT EMP_NAME, DEPT_TITLE, JOB_NAME, SALARY
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
LEFT JOIN JOB USING(JOB_CODE);

--2)서브쿼리
SELECT EMP_NAME
    ,(SELECT DEPT_TITLE FROM DEPARTMENT WHERE DEPT_ID = E.DEPT_CODE) AS DEPT_TITLE
    ,(SELECT JOB_NAME FROM JOB J WHERE J.JOB_CODE = E.JOB_CODE) AS JOB_NAME
    , SALARY
FROM EMPLOYEE E;


--SELECT문으로 잡아준 조건대로 EMP_COPY 테이블이 생성이 됨.
--서브쿼리로 테이블을 생성하는 경우 컬럼이름, 데이터 타입, 값 복사 가능.
--하지만!!!! 제약 조건은 NOT NULL만 복사 가능함.
CREATE TABLE EMP_COPY
AS
SELECT EMP_NAME, DEPT_TITLE, JOB_NAME, SALARY
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
LEFT JOIN JOB USING(JOB_CODE);

SELECT * FROM EMP_COPY;


--내부 데이터 없이 테이블 자체만 복사하고 싶은 경우, WHERE 조건 안에 항상 FALSE 값인 조건을 넣어주면 됨 
CREATE TABLE EMP_COPY2
AS
SELECT EMP_NAME, DEPT_CODE, JOB_CODE, SALARY
FROM EMPLOYEE WHERE 1=0;

CREATE TABLE EMP_COPY3
AS
SELECT EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE WHERE 1=0;

CREATE TABLE EMP_COPY4
AS
SELECT EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE WHERE 1=0;

INSERT ALL
INTO EMP_COPY3 VALUES(EMP_NAME,DEPT_CODE,SALARY)
INTO EMP_COPY4 VALUES(EMP_NAME,JOB_CODE,SALARY)
SELECT EMP_NAME, DEPT_CODE, JOB_CODE, SALARY FROM EMPLOYEE;
SELECT * FROM EMP_COPY3;
SELECT * FROM EMP_COPY4;

-- ALTER : 데이터베이스 객체 정보 수정
CREATE TABLE DEPT_COPY
AS
SELECT * FROM DEPARTMENT;
SELECT * FROM DEPT_COPY;
--테이블 컬럼을 추가, 모든 값은 NULL값을 가짐.
ALTER TABLE DEPT_COPY
ADD (KNAME VARCHAR2(20));

--DEFAULT 값인 HI가 생성한 HNAME컬럼 안에 전체 삽입.
ALTER TABLE DEPT_COPY
ADD (HNAME VARCHAR2(20) DEFAULT 'HI');

DESC DEPT_COPY;

-- 테이블 컬럼 자료형 변경
ALTER TABLE DEPT_COPY
MODIFY DEPT_TITLE VARCHAR2(50);

--제약조건 확인
SELECT 
    UC.CONSTRAINT_NAME,
    UC.CONSTRAINT_TYPE,
    UCC.COLUMN_NAME,
    UC.SEARCH_CONDITION
FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC
ON (UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME)
WHERE UC.TABLE_NAME='DEPT_COPY';

--제약조건 추가
SELECT * FROM DEPT_COPY;
ALTER TABLE DEPT_COPY
--DCOPY_ID_PK : 제약조건의 이름 지정 작성
ADD CONSTRAINT DCOPY_ID_PK PRIMARY KEY(DEPT_ID);
ALTER TABLE DEPT_COPY
ADD CONSTRAINT DCOPY_TITLE_UNQ UNIQUE(DEPT_TITLE);
--NOT NULL 제약조건은 추가시 ADD가 아니라 MODIFY로 함
ALTER TABLE DEPT_COPY
MODIFY HNAME CONSTRAINT DCOPY_HNAME_NN NOT NULL;
--제약조건 제거(제약조건의 이름을 작성해주어야함)
ALTER TABLE DEPT_COPY
DROP CONSTRAINT DCOPY_ID_PK;
ALTER TABLE DEPT_COPY
DROP CONSTRAINT DCOPY_TITLE_UNQ;
ALTER TABLE DEPT_COPY
MODIFY KHNAME NULL;

--컬럼삭제
ALTER TABLE DEPT_COPY
DROP COLUMN KNAME;
SELECT * FROM DEPT_COPY;

--컬럼이름 수정, 제약조건 이름수정, 테이블 이름 수정
-- HNAME ->KHNAME 컬럼 이름 수정
ALTER TABLE DEPT_COPY
RENAME COLUMN HNAME TO KHNAME;
--SYS_C00756 -> DEPT_ID_NN 제약조건 이름 변경
ALTER TABLE DEPT_COPY
RENAME CONSTRAINT SYS_C007054 TO DEPT_ID_NN;
-- DEPT_COPY -> ALTER_TEST 테이블 이름 변경
ALTER TABLE DEPT_COPY
RENAME TO ALTER_TEST;

-- TRUNCATE : 테이블의 전체 행 삭제
-- DELETE와 차이 
-- 1. 수행속도 차이(TRUNCATE가 빠름)
-- 2. 상황에 따라 DELETE는 데이터 복구 가능
TRUNCATE TABLE ALTER_TEST;

-- DROP: 데이터베이스 객체 삭제
DROP TABLE ALTER_TEST;







