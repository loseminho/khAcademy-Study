package kr.or.member.controller;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttribute;

import kr.or.member.model.service.MemberService;
import kr.or.member.model.vo.Member;

@Controller
public class MemberController {
	//autowired : 스프링이 만든 객체중에 선언된 변수와 이름이 일치하는 타입을 찾아서 값을 대입
	@Autowired
	private MemberService service;
	public MemberController() {
		super();
		System.out.println("컨트롤러 생성!");
	}
	
	@RequestMapping(value="/joinFrm.do")
	public String loginFrm() {
		return "member/joinFrm";
	}
	
	//String memberId, String memberPw, String memberName, String phone, String email --> input의 name으로 호출, Member.vo와 변수명이 같다면 Member 타입으로 직접적으로 호출해도 됨.
	@RequestMapping(value="join.do")
	public String login(Member m) {
		int result = service.insertMember(m);
		if(result>0) {
			return "member/joinSuccess";
		}else {
			return "member/joinFail";
		}
	}
	@RequestMapping(value="/login.do")
	public String login(Member m, HttpSession session) {
		Member member = service.selectOneMember(m);
		if(member != null) {
			//HttpServletRequest request를 받아왔을땐
			//HttpSession session = request.getSession(); 으로 받아옴.
			session.setAttribute("m", member);
		}
		//메인페이지로 이동, views 밖에 있는 index.jsp 파일로 가기 위해서는 redirct를 사용함.
		// 그럴 경우, ViewResolber가 앞 뒤에 값을 붙이지 않고 주소를 요청하게 됨.
		return "redirect:/";
	}
	@RequestMapping(value="/searchMember.do")
	public String searchMember(String searchId, Model model) {
		//Member타입이 아니라 String searchId만 받아오는 이유는 만약 조회하는 이름이 Member에 없으면 반환해줄 수 있는 Member type이 없음.
		Member m = service.selectOneMember(searchId);
		if(m == null) {
			return "redirect:/";
		}else {
			// model : controller와 화면사이의 1회용 데이터를 주고 받을 객체
			// request.setAttribute();의 역할을 함
			model.addAttribute("m",m);
			return  "member/searchMember";
		}
	}
	@RequestMapping(value="/logout.do")
	public String logout(HttpSession session) {
		session.invalidate();
		return "redirect:/";
	}
	@RequestMapping(value="/searchAllMember.do")
	public String searchAllMember(Model model) {
		ArrayList<Member> list = service.selectAllMember(); 
		model.addAttribute("list", list);
		return "member/allMember";
	}
	@RequestMapping(value="/myPage.do")
	public String myPage() {
		return "member/myPage";
	}
	@RequestMapping(value="/update.do")
	public String updateMyPage(Member member, @SessionAttribute Member m) {
		int result = service.updateMyPage(member);
		if(result>0) {
			m.setMemberPw(member.getMemberPw());
			m.setPhone(member.getPhone());
			m.setEmail(member.getEmail());
			return "redirect:/myPage.do";
		}else {
			return "redirect:/";
		}
	}
	@RequestMapping(value="/deleteMember.do")
	public String deleteMember(String memberNo) {
		int result = service.deleteMember(memberNo);
		if(result>0) {
			HttpSession session;
			session.invalidate();
		}
		return "redirect:/";
	}
}

