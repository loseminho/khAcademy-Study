package kr.or.board.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import kr.or.board.model.service.BoardService;
import kr.or.board.model.vo.Board;
import kr.or.board.model.vo.FileVO;

@Controller
public class BoardController {
	@Autowired
	private BoardService service;
	public BoardController() {
		super();
		System.out.println("board컨트롤러 생성");
	}
	
	@RequestMapping(value="/boardList.do")
	public String boardList(Model model) {
		ArrayList<Board> list = service.selectAllBoard();
		model.addAttribute("list",list);
		return "board/boardList";
	}
	
	@RequestMapping(value="/boardWriteFrm.do")
	public String boardWriteFrm() {
		return "board/boardWriteFrm";
	}
	@RequestMapping(value="/boardWrite.do")
	public String boardWrite(Board b) {
		int result = service.insertBoard(b);
		return "redirect:/boardList.do";
	}
	@RequestMapping(value="/boardWriteFrm2.do")
	public String boardWriteFrm2() {
		return "board/boardWriteFrm2";
	}
	@RequestMapping(value="/boardWrite2.do")
	public String boardWrite2(Board b, MultipartFile[] boardFile, HttpServletRequest request) {
		//파일 목록을 저장할 리스트 생성
		ArrayList<FileVO> list = new ArrayList<FileVO>();
		
//		multippartFile[]은 jsp에서 첨부한 파일 갯수 만큼 길이가 생성
//		단, 첨부파일은 한개도 첨부하지 않더라도 배열의 길이는 기본적으로 1을 가진다
		//첨부파일이 없는 경우 배열 첫번째 인덱스의 value는 비어있음.
		if(boardFile[0].isEmpty()) {
			//첨부 파일이 없는 경우 수행할 로직은 없다.
		}else {
			//첨부 파일이 있는 경우 파일 업로드를 수행
			//1. 파일 업로드 경로 설정(기본 경로getRealPath()까지는 webapp 폴더)
			String savePath = request.getSession().getServletContext().getRealPath("/resources/upload/board/");
			//2. 반복문을 이용한 파일 업로드
			for(MultipartFile file : boardFile) {
				//파일명이 기존 업로드한 파일명과 중복되는 경우 기존 파일을 삭제하고 새 파일만 남는 현상이 있음(덮어쓰기)
				
				//처리 - 사용자가 업로드한 파일 중 이름 추출
				// ex) test.txt 라는 값을 추출
				String filename = file.getOriginalFilename();
				// 파일 명 중에서 마지막 . 앞 까지 추출
				String onlyFilename = filename.substring(0,filename.lastIndexOf("."));// ex) test
				String extention = filename.substring(filename.lastIndexOf("."));// ex) .txt
				//실제 업로드할 파일 명
				String filepath = null;
				//파일 명이 중복되는 경우 뒤에 붙일 숫자
				int count = 0;
				while(true) {
					if(count==0) {
						//파일 이름 체크 반복 첫번째
						filepath = onlyFilename+extention;// test.txt
					}else {
						//중복 되는 경우, _숫자를 붙임
						filepath = onlyFilename+"_"+count+extention;
					}
					File checkFile = new File(savePath+filepath);
					if(!checkFile.exists()) {
						//중복 되는 파일 명이 없는 경우에 반복문 나감
						break;
					}
					count++;
				}
				//파일명 중복체크 끝나는 지점 -> 파일 업로드를 진행
				
				//중복 처리가 끝난 파일명으로 파일 업로드 진행
				try {
					FileOutputStream fos = new FileOutputStream(new File(savePath+filepath));
					//속도 개선을 위한 보조 스트림 사용
					BufferedOutputStream bos = new BufferedOutputStream(fos);
					byte[] bytes = file.getBytes();
					bos.write(bytes);
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return "redirect:/boardList.do";
	}
	
	@RequestMapping(value="/boardView.do")
	public String boardView(int boardNo, Model model) {
		Board board = service.boardView(boardNo);
		if(board == null) {
			return "redirect:/";
		}else {
			model.addAttribute("board",board);
			return "board/boardView";
		}
	}
	@RequestMapping(value="/boardUpdateFrm.do")
	public String boardUpdateFrm(int boardNo, Model model) {
		Board board = service.boardView(boardNo);
		model.addAttribute("board",board);
		return "board/boardUpdateFrm";
	}
//	@RequestMapping(value="/boardUpdate.do")
//	@RequestMapping(value="/boardDelete.do")
}
